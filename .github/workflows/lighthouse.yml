# Performs Lighthouse checks
name: Lighthouse

on:
  # Runs on pushes targeting the default branch
  pull_request:
    branches: [ "main" ]

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Check on PR
  lighthouse:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.139.3
      NODE_VERSION: 23.x
    permissions:
      # Required to upload/save artifact, otherwise you'll get
      # "Error: Resource not accessible by integration"
      contents: write
      # Required to post comment, otherwise you'll get
      # "Error: Resource not accessible by integration"
      pull-requests: write
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install Dart Sass Embedded
        run: sudo snap install dart-sass-embedded
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Node.js ${{ NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ NODE_VERSION }}
          cache: 'npm'
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - run: npm run build --if-present
      - name: Build with Hugo
        working-directory: ./src
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --minify
      - name: Run Hugo Server
        working-directory: ./src
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        # Run server in background
        run: hugo server &
        # Wait till the server warms up
      - run: sleep 15
      - name: Run Lighthouse Desktop
        run: npm run lighthouse-desktop
      - name: Run Lighthouse Mobile
        run: npm run lighthouse-mobile
      - name: Make Lighthouse Mobile Report Screenshot
        run: npm run screenshot:mobile
      - name: Make Lighthouse Desktop Report Screenshot
        run: npm run screenshot:desktop
      - name: Upload Lighthouse Report
        id: lighthouseUploadReport
        uses: actions/upload-artifact@master
        with:
          name: Lighthouse-report
          path: |
            desktop.report.html
            desktop.report.json
            mobile.report.html
            mobile.report.json
      - name: Upload files to Imgbb
        id: upload-files-imgbb
        uses: McCzarny/upload-image@v1.2.5
        with:
          path: |
            mobile.jpg
            desktop.jpg
          uploadMethod: imgbb
          apiKey: '${{ secrets.IMGBB_API_KEY }}'
      - name: Publish info
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Lighthouse Report
            |  Mobile  |  Desktop |
            |----|----|
            | ![Lighthouse Mobile Report Score](${{steps.upload-files-imgbb.outputs.url[0]}}) | ![Lighthouse Desktop Report Score](${{steps.upload-files-imgbb.outputs.url[1]}}) |
            
            [Download report ZIP](${{ steps.lighthouseUploadReport.outputs.artifact-url }})
